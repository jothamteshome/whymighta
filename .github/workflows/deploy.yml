name: Deploy to EC2 via AWS SSM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update SSM Parameters
      run: |
        aws ssm put-parameter --name "/whymighta/db/username" --value "${{ secrets.MYSQL_USERNAME }}" --type "String" --overwrite
        aws ssm put-parameter --name "/whymighta/db/password" --value "${{ secrets.MYSQL_PASSWORD }}" --type "SecureString" --overwrite
        aws ssm put-parameter --name "/whymighta/db/host" --value "${{ secrets.MYSQL_HOST }}" --type "String" --overwrite
        aws ssm put-parameter --name "/whymighta/db/port" --value "${{ secrets.MYSQL_PORT }}" --type "String" --overwrite
        aws ssm put-parameter --name "/whymighta/db/name" --value "${{ secrets.MYSQL_DATABASE }}" --type "String" --overwrite
        aws ssm put-parameter --name "/whymighta/encryption/key" --value "${{ secrets.ENCRYPTION_KEY }}" --type "SecureString" --overwrite
        aws ssm put-parameter --name "/whymighta/api/chatgpt/url" --value "${{ secrets.AWS_CHATGPT_API_URL }}" --type "String" --overwrite
        aws ssm put-parameter --name "/whymighta/api/chatgpt/key" --value "${{ secrets.AWS_CHATGPT_API_KEY }}" --type "SecureString" --overwrite
        aws ssm put-parameter --name "/whymighta/api/weather/key" --value "${{ secrets.WEATHER_API_KEY }}" --type "SecureString" --overwrite
        aws ssm put-parameter --name "/whymighta/discord/token" --value "${{ secrets.DISCORD_TOKEN }}" --type "SecureString" --overwrite

    - name: Kill all tmux sessions
      run: |
        command_id=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":["sudo -u ubuntu bash -c '\''tmux kill-server 2>/dev/null || true'\''"]}' \
          --comment "Kill old tmux sessions" \
          --query 'Command.CommandId' \
          --output text)
        echo "command_id=$command_id" >> $GITHUB_ENV

    - name: Wait for `Kill all tmux sessions` to complete
      run: |
        while true; do
          status=$(aws ssm list-command-invocations \
            --command-id ${{ env.command_id }} \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "CommandInvocations[0].Status" \
            --output text)
          echo "Status: $status"
          if [[ "$status" == "Success" ]]; then
            break
          elif [[ "$status" == "Cancelled" || "$status" == "Failed" || "$status" == "TimedOut" ]]; then
            echo "Command failed with status: $status"
            exit 1
          fi
          sleep 5
        done

    - name: Pull latest code on EC2
      run: |
        command_id=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":[
            "sudo -u ubuntu bash -c '\''mkdir -p /home/ubuntu/whymighta'\''",
            "sudo -u ubuntu bash -c '\''cd /home/ubuntu/whymighta && git config --global --add safe.directory /home/ubuntu/whymighta && git checkout main && git pull origin main'\''"
          ]}' \
          --comment "Update code" \
          --query 'Command.CommandId' \
          --output text)
        echo "command_id=$command_id" >> $GITHUB_ENV

    - name: Wait for `Pull latest code on EC2` to complete
      run: |
        while true; do
          status=$(aws ssm list-command-invocations \
            --command-id ${{ env.command_id }} \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "CommandInvocations[0].Status" \
            --output text)
          echo "Status: $status"
          if [[ "$status" == "Success" ]]; then
            break
          elif [[ "$status" == "Cancelled" || "$status" == "Failed" || "$status" == "TimedOut" ]]; then
            echo "Command failed with status: $status"
            exit 1
          fi
          sleep 5
        done

    - name: Uninstall Python dependencies
      run: |
        command_id=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":[
            "sudo -u ubuntu bash -c '\''cd /home/ubuntu/whymighta && python3 -m venv .venv 2>/dev/null || true && .venv/bin/pip uninstall -y -r <(.venv/bin/pip freeze)'\''"
          ]}' \
          --comment "Install requirements" \
          --query 'Command.CommandId' \
          --output text)
        echo "command_id=$command_id" >> $GITHUB_ENV

    - name: Wait for `Uninstall Python dependencies` to complete
      run: |
        while true; do
          status=$(aws ssm list-command-invocations \
            --command-id ${{ env.command_id }} \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "CommandInvocations[0].Status" \
            --output text)
          echo "Status: $status"
          if [[ "$status" == "Success" ]]; then
            break
          elif [[ "$status" == "Cancelled" || "$status" == "Failed" || "$status" == "TimedOut" ]]; then
            echo "Command failed with status: $status"
            exit 1
          fi
          sleep 5
        done

    - name: Install Python dependencies
      run: |
        command_id=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":[
            "sudo -u ubuntu bash -c '\''cd /home/ubuntu/whymighta && python3 -m venv .venv 2>/dev/null || true && .venv/bin/pip install -U -r requirements.txt'\''"
          ]}' \
          --comment "Install requirements" \
          --query 'Command.CommandId' \
          --output text)
        echo "command_id=$command_id" >> $GITHUB_ENV

    - name: Wait for `Install Python dependencies` to complete
      run: |
        while true; do
          status=$(aws ssm list-command-invocations \
            --command-id ${{ env.command_id }} \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "CommandInvocations[0].Status" \
            --output text)
          echo "Status: $status"
          if [[ "$status" == "Success" ]]; then
            break
          elif [[ "$status" == "Cancelled" || "$status" == "Failed" || "$status" == "TimedOut" ]]; then
            echo "Command failed with status: $status"
            exit 1
          fi
          sleep 5
        done

    - name: Start tmux session and run bot script
      run: |
        command_id=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":[
            "sudo -u ubuntu bash -c '\''cd /home/ubuntu/whymighta && tmux new-session -d -s whymighta-instance'\''",
            "sudo -u ubuntu bash -c '\''tmux send-keys -t whymighta-instance \"source /etc/profile.d/load_ssm_env.sh && .venv/bin/python3 whymighta.py\" C-m'\''"
          ]}' \
          --comment "Start bot in tmux" \
          --query 'Command.CommandId' \
          --output text)
        echo "command_id=$command_id" >> $GITHUB_ENV

    - name: Wait for `Start tmux session and run bot script` to complete
      run: |
        while true; do
          status=$(aws ssm list-command-invocations \
            --command-id ${{ env.command_id }} \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "CommandInvocations[0].Status" \
            --output text)
          echo "Status: $status"
          if [[ "$status" == "Success" ]]; then
            break
          elif [[ "$status" == "Cancelled" || "$status" == "Failed" || "$status" == "TimedOut" ]]; then
            echo "Command failed with status: $status"
            exit 1
          fi
          sleep 5
        done
